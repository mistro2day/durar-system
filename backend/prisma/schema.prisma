generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int             @id @default(autoincrement())
  name         String
  email        String          @unique
  password     String
  role         Role            @default(USER)
  createdAt    DateTime        @default(now())
  activityLogs ActivityLog[]
  resets       PasswordReset[]
  @@index([createdAt])
}

model Property {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  type      PropertyType
  address   String?
  createdAt DateTime     @default(now())
  units     Unit[]
  @@index([type])
}

model Unit {
  id          Int                 @id @default(autoincrement())
  number      String
  type        UnitType
  status      UnitStatus          @default(AVAILABLE)
  propertyId  Int
  createdAt   DateTime            @default(now())
  area        Float?
  baths       Int?                @default(1)
  floor       Int?                @default(0)
  rooms       Int?                @default(1)
  bookings    Booking[]
  contracts   Contract[]
  maintenance MaintenanceTicket[]
  property    Property            @relation(fields: [propertyId], references: [id])
  @@index([propertyId])
  @@index([status])
  @@index([type])
  @@index([number, propertyId])
}

model Tenant {
  id        Int        @id @default(autoincrement())
  name      String
  phone     String
  email     String?
  nationalId String? @unique
  birthDate DateTime?
  gender    String?
  nationality String?
  address   String?
  city      String?
  country   String?
  employer  String?
  emergencyContactName String?
  emergencyContactPhone String?
  notes     String?
  createdAt DateTime   @default(now())
  bookings  Booking[]
  contracts Contract[]
  invoices  Invoice[]
  @@index([name])
}

model Booking {
  id        Int           @id @default(autoincrement())
  tenantId  Int
  unitId    Int
  startDate DateTime
  endDate   DateTime
  total     Float
  status    BookingStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  tenant    Tenant        @relation(fields: [tenantId], references: [id])
  unit      Unit          @relation(fields: [unitId], references: [id])
  invoices  Invoice[]
  @@index([tenantId])
  @@index([unitId])
  @@index([status])
  @@index([startDate])
  @@index([unitId, startDate])
}

model Invoice {
  id         Int           @id @default(autoincrement())
  tenantId   Int?
  bookingId  Int?
  contractId Int?
  amount     Float
  dueDate    DateTime
  status     InvoiceStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  booking    Booking?      @relation(fields: [bookingId], references: [id])
  contract   Contract?     @relation(fields: [contractId], references: [id])
  tenant     Tenant?       @relation(fields: [tenantId], references: [id])
  payments   Payment[]
  @@index([tenantId])
  @@index([contractId])
  @@index([bookingId])
  @@index([status])
  @@index([dueDate])
}

model Payment {
  id        Int           @id @default(autoincrement())
  invoiceId Int
  amount    Float
  method    PaymentMethod
  paidAt    DateTime      @default(now())
  invoice   Invoice       @relation(fields: [invoiceId], references: [id])
  @@index([invoiceId])
}

model Shop {
  id        Int      @id @default(autoincrement())
  name      String
  location  String?
  phone     String?
  ownerId   Int?
  createdAt DateTime @default(now())
  @@index([ownerId])
}

model MaintenanceTicket {
  id          Int                 @id @default(autoincrement())
  unitId      Int
  description String
  priority    Priority
  status      TicketStatus        @default(NEW)
  createdAt   DateTime            @default(now())
  actions     MaintenanceAction[]
  unit        Unit                @relation(fields: [unitId], references: [id])
  @@index([unitId])
  @@index([status])
  @@index([createdAt])
}

model MaintenanceAction {
  id          Int               @id @default(autoincrement())
  ticketId    Int
  actionTaken String
  performedBy String
  performedAt DateTime          @default(now())
  ticket      MaintenanceTicket @relation(fields: [ticketId], references: [id])
  @@index([ticketId])
}

model Contract {
  id           Int            @id @default(autoincrement())
  tenantId     Int?
  unitId       Int
  startDate    DateTime
  endDate      DateTime
  rentAmount   Float
  status       ContractStatus @default(ACTIVE)
  autoInvoice  Boolean        @default(true)
  createdAt    DateTime       @default(now())
  amount       Float
  rentalType   String
  tenantName   String
  deposit      Float?         @default(0)
  ejarContractNumber String?
  paymentMethod String?
  paymentFrequency String?
  servicesIncluded String?
  notes       String?
  activityLogs ActivityLog[]
  tenant       Tenant?        @relation(fields: [tenantId], references: [id])
  unit         Unit           @relation(fields: [unitId], references: [id])
  invoices     Invoice[]
  @@index([tenantId])
  @@index([unitId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([createdAt])
}

model ActivityLog {
  id          Int       @id @default(autoincrement())
  action      String
  description String?
  contractId  Int?
  userId      Int?
  createdAt   DateTime  @default(now())
  contract    Contract? @relation(fields: [contractId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])
  @@index([contractId])
  @@index([userId])
  @@index([createdAt])
}

model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     Json
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  @@index([userId])
}

enum Role {
  ADMIN
  USER
}

enum PropertyType {
  HOTEL
  BUILDING
  COMMERCIAL
}

enum UnitType {
  DAILY
  MONTHLY
  YEARLY
}

enum UnitStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}

enum BookingStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ContractStatus {
  ACTIVE
  ENDED
  CANCELLED
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  EJAR
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TicketStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
